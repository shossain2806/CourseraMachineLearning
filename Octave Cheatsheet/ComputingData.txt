 A = [1 2; 3 4; 5 6]
 B = [11 12; 13 14; 15 16]
 C = [1 1; 2 2]
 A * C % matrix multiplication
 A .* B % element wise multiplication
 A .^ 2 % element wise squaring 

 v = [1; 2; 3]
 1 ./ v % element wise reciprocal

log(v) % element wise logarithm  
exp(v) % exponential 
abs(v) 
abs([-1; 2; -3])

v + ones(length(v), 1)
v + 1

A' % transpoe
(A')'
a = [10 15 -1]
max(a)

[val, ind] = max(a)

max(A) # column wise

a = [1 , 15, 2 , 0.5]
a < 3 % element wise comparison
find( a < 3) # 1 , 3, 4

A = magic(3) % row, column, diagonal sum is equal
[r, c] = find(A >= 7)
A(2, 3)   % 2nd row , 3rd column

sum(a) % sum
prod(a) % multiply
floor(a)
ceil(a)

A = magic(3)
max(A, [], 1) % column wise maximum
max(A, [], 2) % row wise maximum
max(A) % default column wise max
max(max(A)) % maximum in matrix
max(A(:)) % maximum of A to vector
 
 A = magic(9)
 sum(A, 1) % per column sum
 sum(A, 2) % per row sum

 A .* eye(9)
 sum(sum(A .* eye(9))
 sum(sum(A .* flipud(eye(9))) % flip up down

 A = magic(3)
 pinv(A)

 temp = pinv(A)
 temp * A % identity matrix